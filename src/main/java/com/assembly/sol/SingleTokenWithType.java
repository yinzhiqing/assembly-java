package com.assembly.sol;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class SingleTokenWithType extends Contract {
    public static final String BINARY = "608060405234801561001057600080fd5b50613806806100206000396000f3fe608060405234801561001057600080fd5b506004361061027f5760003560e01c80635c975abb1161015c578063a22cb465116100ce578063ce33c0c611610087578063ce33c0c61461053a578063d53913931461054d578063d547741f14610555578063e63ab1e914610568578063e985e9c514610570578063ea445595146105835761027f565b8063a22cb465146104c8578063a6487c53146104db578063b6eeeb22146104ee578063b88d4fde14610501578063c87b56dd14610514578063ca15c873146105275761027f565b806374a487381161012057806374a48738146104775780638456cb591461048a5780639010d07c1461049257806391d14854146104a557806395d89b41146104b8578063a217fddf146104c05761027f565b80635c975abb1461042e5780636352211e1461043657806368bcc3fd1461044957806370a082311461045c5780637363ee421461046f5761027f565b80632e643fa3116101f557806342842e0e116101b957806342842e0e146103bc57806342966c68146103cf5780634ed0181b146103e25780634f01e51b146103f55780634f6ccce7146104085780635b7852c91461041b5761027f565b80632e643fa3146103735780632f2ff15d1461037b5780632f745c591461038e57806336568abe146103a15780633f4ba83a146103b45761027f565b806310f33ee71161024757806310f33ee714610317578063156e29f61461032a57806318160ddd1461033d57806323b872dd14610345578063248a9ca3146103585780632a709b141461036b5761027f565b8063016c71bd1461028457806301ffc9a7146102ad57806306fdde03146102cd578063081812fc146102e2578063095ea7b314610302575b600080fd5b6102976102923660046129eb565b610596565b6040516102a49190612ca9565b60405180910390f35b6102c06102bb366004612a46565b6105ac565b6040516102a49190612c9e565b6102d56105bd565b6040516102a49190612cb2565b6102f56102f03660046129eb565b61064f565b6040516102a49190612c4d565b610315610310366004612990565b61069b565b005b6102c06103253660046129eb565b610733565b6103156103383660046129b9565b610749565b6102976107a5565b6103156103533660046128a2565b6107ab565b6102976103663660046129eb565b6107e3565b6102f56107f8565b610297610808565b610315610389366004612a03565b61080f565b61029761039c366004612990565b610831565b6103156103af366004612a03565b610883565b6103156108a5565b6103156103ca3660046128a2565b6108e5565b6103156103dd3660046129eb565b610900565b6103156103f0366004612a25565b610933565b610315610403366004612856565b610a0d565b6102976104163660046129eb565b610aad565b6102976104293660046129eb565b610b08565b6102c0610b2c565b6102f56104443660046129eb565b610b36565b6103156104573660046129eb565b610b6b565b61029761046a366004612856565b610bb0565b610297610bf4565b6102c06104853660046129eb565b610bf9565b610315610c0f565b6102f56104a0366004612a25565b610c4d565b6102c06104b3366004612a03565b610c6c565b6102d5610c97565b610297610ca6565b6103156104d6366004612956565b610cab565b6103156104e9366004612a7e565b610d79565b6103156104fc3660046129eb565b610dfc565b61031561050f3660046128dd565b610e3e565b6102d56105223660046129eb565b610e77565b6102976105353660046129eb565b610ef9565b610315610548366004612b02565b610f10565b610297611017565b610315610563366004612a03565b61103b565b610297611045565b6102c061057e366004612870565b611057565b6102d56105913660046129eb565b611085565b60008181526101cb60205260409020545b919050565b60006105b782611156565b92915050565b606060c980546105cc906136ee565b80601f01602080910402602001604051908101604052809291908181526020018280546105f8906136ee565b80156106455780601f1061061a57610100808354040283529160200191610645565b820191906000526020600020905b81548152906001019060200180831161062857829003601f168201915b5050505050905090565b600061065a8261117b565b61067f5760405162461bcd60e51b8152600401610676906132ee565b60405180910390fd5b50600090815260cd60205260409020546001600160a01b031690565b60006106a682610b36565b9050806001600160a01b0316836001600160a01b031614156106da5760405162461bcd60e51b815260040161067690613422565b806001600160a01b03166106ec611198565b6001600160a01b0316148061070857506107088161057e611198565b6107245760405162461bcd60e51b8152600401610676906130a8565b61072e838361119c565b505050565b60009081526101c7602052604090205460ff1690565b6107757f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a66104b3611198565b6107915760405162461bcd60e51b815260040161067690612fd7565b61079b83836111d5565b61072e82826111ef565b60fd5490565b6107bc6107b6611198565b826112d0565b6107d85760405162461bcd60e51b815260040161067690613463565b61072e838383611355565b60009081526065602052604090206001015490565b6101fc546001600160a01b031690565b6101c55490565b6108198282611482565b600082815260976020526040902061072e90826114a6565b600061083c83610bb0565b821061085a5760405162461bcd60e51b815260040161067690612ddf565b506001600160a01b0391909116600090815260fb60209081526040808320938352929052205490565b61088d82826114bb565b600082815260976020526040902061072e90826114fd565b6108bf6000805160206137b18339815191526104b3611198565b6108db5760405162461bcd60e51b815260040161067690613029565b6108e3611512565b565b61072e83838360405180602001604052806000815250610e3e565b61090b6107b6611198565b6109275760405162461bcd60e51b81526004016106769061357c565b61093081611581565b50565b61094060006104b3611198565b61095c5760405162461bcd60e51b815260040161067690613105565b60008281526101c6602052604090205460ff1661098b5760405162461bcd60e51b815260040161067690612ee1565b610993610b2c565b156109b05760405162461bcd60e51b81526004016106769061333a565b60008281526101c860205260409020546000196109cd8383613649565b11156109eb5760405162461bcd60e51b815260040161067690613500565b6109f58282613649565b60009384526101c86020526040909320929092555050565b610a1a60006104b3611198565b610a365760405162461bcd60e51b815260040161067690613105565b610a3e610b2c565b15610a5b5760405162461bcd60e51b81526004016106769061333a565b6101fc546001600160a01b0382811691161415610a8a5760405162461bcd60e51b81526004016106769061326d565b6101fc80546001600160a01b0319166001600160a01b0392909216919091179055565b6000610ab76107a5565b8210610ad55760405162461bcd60e51b8152600401610676906134b4565b60fd8281548110610af657634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050919050565b60006101c58281548110610af657634e487b7160e01b600052603260045260246000fd5b61015f5460ff1690565b600081815260cb60205260408120546001600160a01b0316806105b75760405162461bcd60e51b8152600401610676906131a1565b610b7860006104b3611198565b610b945760405162461bcd60e51b815260040161067690613105565b60009081526101c760205260409020805460ff19166001179055565b60006001600160a01b038216610bd85760405162461bcd60e51b815260040161067690613157565b506001600160a01b0316600090815260cc602052604090205490565b600090565b60009081526101c6602052604090205460ff1690565b610c296000805160206137b18339815191526104b3611198565b610c455760405162461bcd60e51b815260040161067690613529565b6108e361159c565b6000828152609760205260408120610c6590836115f8565b9392505050565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b606060ca80546105cc906136ee565b600081565b610cb3611198565b6001600160a01b0316826001600160a01b03161415610ce45760405162461bcd60e51b815260040161067690612f54565b8060ce6000610cf1611198565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff191692151592909217909155610d35611198565b6001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051610d6d9190612c9e565b60405180910390a35050565b600054610100900460ff1680610d92575060005460ff16155b610dae5760405162461bcd60e51b8152600401610676906131ea565b600054610100900460ff16158015610dd9576000805460ff1961ff0019909116610100171660011790555b610de4848484611604565b8015610df6576000805461ff00191690555b50505050565b610e0960006104b3611198565b610e255760405162461bcd60e51b815260040161067690613105565b60009081526101c760205260409020805460ff19169055565b610e4f610e49611198565b836112d0565b610e6b5760405162461bcd60e51b815260040161067690613463565b610df6848484846116b7565b6060610e828261117b565b610e9e5760405162461bcd60e51b8152600401610676906133d3565b6000610ea86116ea565b90506000815111610ec85760405180602001604052806000815250610c65565b80610ed2846116fa565b604051602001610ee3929190612ba9565b6040516020818303038152906040529392505050565b60008181526097602052604081206105b790611815565b610f1d60006104b3611198565b610f395760405162461bcd60e51b815260040161067690613105565b60008481526101c6602052604090205460ff1615610f695760405162461bcd60e51b81526004016106769061361b565b610f71610b2c565b15610f8e5760405162461bcd60e51b81526004016106769061333a565b60008481526101c660209081526040808320805460ff199081166001179091556101c78352818420805490911690556101ca9091529020610fd090838361269d565b50506101c58054600181019091557f818f40e4590a6f2c3ec1caee0533b9960911937d8dd67c8f1447b1392a84f253018390555060009182526101c8602052604090912055565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b61088d8282611820565b6000805160206137b183398151915281565b6001600160a01b03918216600090815260ce6020908152604080832093909416825291909152205460ff1690565b60008181526101c6602052604090205460609060ff166110b75760405162461bcd60e51b8152600401610676906132be565b60008281526101ca6020526040902080546110d1906136ee565b80601f01602080910402602001604051908101604052809291908181526020018280546110fd906136ee565b801561114a5780601f1061111f5761010080835404028352916020019161114a565b820191906000526020600020905b81548152906001019060200180831161112d57829003601f168201915b50505050509050919050565b60006001600160e01b0319821663780e9d6360e01b14806105b757506105b78261183f565b600090815260cb60205260409020546001600160a01b0316151590565b3390565b6001600160a01b038216156111ba576111b5828261187f565b6111d1565b6101fc546111d1906001600160a01b03168261187f565b5050565b6111d18282604051806020016040528060008152506118ed565b60008181526101c6602052604090205460ff1661121e5760405162461bcd60e51b8152600401610676906132be565b60008181526101c7602052604090205460ff161561124e5760405162461bcd60e51b815260040161067690612cc5565b60008181526101c860209081526040808320546101c990925290912061127390611920565b106112905760405162461bcd60e51b815260040161067690612e2a565b60008281526101cb602090815260408083208490558383526101c990915290206112b990611924565b6101fc546111d1906001600160a01b03168361119c565b60006112db8261117b565b6112f75760405162461bcd60e51b815260040161067690612f8b565b600061130283610b36565b9050806001600160a01b0316846001600160a01b0316148061133d5750836001600160a01b03166113328461064f565b6001600160a01b0316145b8061134d575061134d8185611057565b949350505050565b826001600160a01b031661136882610b36565b6001600160a01b03161461138e5760405162461bcd60e51b81526004016106769061338a565b6001600160a01b0382166113b45760405162461bcd60e51b815260040161067690612f10565b6113bf83838361192d565b6113ca60008261119c565b6001600160a01b038316600090815260cc602052604081208054600192906113f3908490613694565b90915550506001600160a01b038216600090815260cc60205260408120805460019290611421908490613649565b9091555050600081815260cb602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b61148b826107e3565b61149c81611497611198565b611938565b61072e838361199c565b6000610c65836001600160a01b038416611a23565b6114c3611198565b6001600160a01b0316816001600160a01b0316146114f35760405162461bcd60e51b8152600401610676906135cc565b6111d18282611a6d565b6000610c65836001600160a01b038416611af2565b61151a610b2c565b6115365760405162461bcd60e51b815260040161067690612db1565b61015f805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa61156a611198565b6040516115779190612c4d565b60405180910390a1565b61158a81611c09565b60009081526101cb6020526040812055565b6115a4610b2c565b156115c15760405162461bcd60e51b81526004016106769061307e565b61015f805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861156a611198565b6000610c658383611cb0565b600054610100900460ff168061161d575060005460ff16155b6116395760405162461bcd60e51b8152600401610676906131ea565b600054610100900460ff16158015611664576000805460ff1961ff0019909116610100171660011790555b61166c611d09565b611674611d09565b61167c611d09565b611684611d09565b61168e8484611d7d565b611696611d09565b61169e611d09565b6116a6611e1b565b6116ae611d09565b610de482611e9a565b6116c2848484611355565b6116ce84848484611fa5565b610df65760405162461bcd60e51b815260040161067690612e58565b60606101c380546105cc906136ee565b60608161171f57506040805180820190915260018152600360fc1b60208201526105a7565b8160005b8115611749578061173381613729565b91506117429050600a83613661565b9150611723565b60008167ffffffffffffffff81111561177257634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561179c576020820181803683370190505b5090505b841561134d576117b1600183613694565b91506117be600a86613744565b6117c9906030613649565b60f81b8183815181106117ec57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535061180e600a86613661565b94506117a0565b60006105b782611920565b611829826107e3565b61183581611497611198565b61072e8383611a6d565b60006001600160e01b031982166380ac58cd60e01b148061187057506001600160e01b03198216635b5e139f60e01b145b806105b757506105b7826120c0565b600081815260cd6020526040902080546001600160a01b0319166001600160a01b03841690811790915581906118b482610b36565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6118f783836120e5565b6119046000848484611fa5565b61072e5760405162461bcd60e51b815260040161067690612e58565b5490565b80546001019055565b61072e8383836121c4565b6119428282610c6c565b6111d15761195a816001600160a01b031660146121f4565b6119658360206121f4565b604051602001611976929190612bd8565b60408051601f198184030181529082905262461bcd60e51b825261067691600401612cb2565b6119a68282610c6c565b6111d15760008281526065602090815260408083206001600160a01b03851684529091529020805460ff191660011790556119df611198565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000611a2f83836123a6565b611a65575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556105b7565b5060006105b7565b611a778282610c6c565b156111d15760008281526065602090815260408083206001600160a01b03851684529091529020805460ff19169055611aae611198565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b60008181526001830160205260408120548015611bff576000611b16600183613694565b8554909150600090611b2a90600190613694565b90506000866000018281548110611b5157634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905080876000018481548110611b8257634e487b7160e01b600052603260045260246000fd5b600091825260208083209091019290925582815260018901909152604090208490558654879080611bc357634e487b7160e01b600052603160045260246000fd5b600190038181906000526020600020016000905590558660010160008781526020019081526020016000206000905560019450505050506105b7565b60009150506105b7565b6000611c1482610b36565b9050611c228160008461192d565b611c2d60008361119c565b6001600160a01b038116600090815260cc60205260408120805460019290611c56908490613694565b9091555050600082815260cb602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b81546000908210611cd35760405162461bcd60e51b815260040161067690612cef565b826000018281548110611cf657634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b600054610100900460ff1680611d22575060005460ff16155b611d3e5760405162461bcd60e51b8152600401610676906131ea565b600054610100900460ff16158015611d69576000805460ff1961ff0019909116610100171660011790555b8015610930576000805461ff001916905550565b600054610100900460ff1680611d96575060005460ff16155b611db25760405162461bcd60e51b8152600401610676906131ea565b600054610100900460ff16158015611ddd576000805460ff1961ff0019909116610100171660011790555b8251611df09060c9906020860190612721565b508151611e049060ca906020850190612721565b50801561072e576000805461ff0019169055505050565b600054610100900460ff1680611e34575060005460ff16155b611e505760405162461bcd60e51b8152600401610676906131ea565b600054610100900460ff16158015611e7b576000805460ff1961ff0019909116610100171660011790555b61015f805460ff191690558015610930576000805461ff001916905550565b600054610100900460ff1680611eb3575060005460ff16155b611ecf5760405162461bcd60e51b8152600401610676906131ea565b600054610100900460ff16158015611efa576000805460ff1961ff0019909116610100171660011790555b8151611f0e906101c3906020850190612721565b50611f216000611f1c611198565b6123be565b611f4d7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6611f1c611198565b611f676000805160206137b1833981519152611f1c611198565b611f6f611198565b6101fc80546001600160a01b0319166001600160a01b039290921691909117905580156111d1576000805461ff00191690555050565b6000611fb9846001600160a01b03166123c8565b156120b557836001600160a01b031663150b7a02611fd5611198565b8786866040518563ffffffff1660e01b8152600401611ff79493929190612c61565b602060405180830381600087803b15801561201157600080fd5b505af1925050508015612041575060408051601f3d908101601f1916820190925261203e91810190612a62565b60015b61209b573d80801561206f576040519150601f19603f3d011682016040523d82523d6000602084013e612074565b606091505b5080516120935760405162461bcd60e51b815260040161067690612e58565b805181602001fd5b6001600160e01b031916630a85bd0160e11b14905061134d565b506001949350505050565b60006001600160e01b03198216635a05180f60e01b14806105b757506105b7826123ce565b6001600160a01b03821661210b5760405162461bcd60e51b815260040161067690613238565b6121148161117b565b156121315760405162461bcd60e51b815260040161067690612eaa565b61213d6000838361192d565b6001600160a01b038216600090815260cc60205260408120805460019290612166908490613649565b9091555050600081815260cb602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6121cf8383836123f3565b6121d7610b2c565b1561072e5760405162461bcd60e51b815260040161067690612d66565b60606000612203836002613675565b61220e906002613649565b67ffffffffffffffff81111561223457634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561225e576020820181803683370190505b509050600360fc1b8160008151811061228757634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106122c457634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060006122e8846002613675565b6122f3906001613649565b90505b6001811115612387576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061233557634e487b7160e01b600052603260045260246000fd5b1a60f81b82828151811061235957634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c93612380816136d7565b90506122f6565b508315610c655760405162461bcd60e51b815260040161067690612d31565b60009081526001919091016020526040902054151590565b610819828261247c565b3b151590565b60006001600160e01b03198216637965db0b60e01b14806105b757506105b782612486565b6123fe83838361072e565b6001600160a01b03831661241a576124158161249f565b61243d565b816001600160a01b0316836001600160a01b03161461243d5761243d83826124e3565b6001600160a01b0382166124595761245481612580565b61072e565b826001600160a01b0316826001600160a01b03161461072e5761072e8282612659565b6111d1828261199c565b6001600160e01b031981166301ffc9a760e01b14919050565b60fd8054600083815260fe60205260408120829055600182018355919091527f9346ac6dd7de6b96975fec380d4d994c4c12e6a8897544f22915316cc6cca2800155565b600060016124f084610bb0565b6124fa9190613694565b600083815260fc602052604090205490915080821461254d576001600160a01b038416600090815260fb60209081526040808320858452825280832054848452818420819055835260fc90915290208190555b50600091825260fc602090815260408084208490556001600160a01b03909416835260fb81528383209183525290812055565b60fd5460009061259290600190613694565b600083815260fe602052604081205460fd80549394509092849081106125c857634e487b7160e01b600052603260045260246000fd5b906000526020600020015490508060fd83815481106125f757634e487b7160e01b600052603260045260246000fd5b600091825260208083209091019290925582815260fe909152604080822084905585825281205560fd80548061263d57634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b600061266483610bb0565b6001600160a01b03909316600090815260fb60209081526040808320868452825280832085905593825260fc9052919091209190915550565b8280546126a9906136ee565b90600052602060002090601f0160209004810192826126cb5760008555612711565b82601f106126e45782800160ff19823516178555612711565b82800160010185558215612711579182015b828111156127115782358255916020019190600101906126f6565b5061271d929150612795565b5090565b82805461272d906136ee565b90600052602060002090601f01602090048101928261274f5760008555612711565b82601f1061276857805160ff1916838001178555612711565b82800160010185558215612711579182015b8281111561271157825182559160200191906001019061277a565b5b8082111561271d5760008155600101612796565b600067ffffffffffffffff808411156127c5576127c5613784565b604051601f8501601f19908116603f011681019082821181831017156127ed576127ed613784565b8160405280935085815286868601111561280657600080fd5b858560208301376000602087830101525050509392505050565b80356001600160a01b03811681146105a757600080fd5b600082601f830112612847578081fd5b610c65838335602085016127aa565b600060208284031215612867578081fd5b610c6582612820565b60008060408385031215612882578081fd5b61288b83612820565b915061289960208401612820565b90509250929050565b6000806000606084860312156128b6578081fd5b6128bf84612820565b92506128cd60208501612820565b9150604084013590509250925092565b600080600080608085870312156128f2578081fd5b6128fb85612820565b935061290960208601612820565b925060408501359150606085013567ffffffffffffffff81111561292b578182fd5b8501601f8101871361293b578182fd5b61294a878235602084016127aa565b91505092959194509250565b60008060408385031215612968578182fd5b61297183612820565b915060208301358015158114612985578182fd5b809150509250929050565b600080604083850312156129a2578182fd5b6129ab83612820565b946020939093013593505050565b6000806000606084860312156129cd578283fd5b6129d684612820565b95602085013595506040909401359392505050565b6000602082840312156129fc578081fd5b5035919050565b60008060408385031215612a15578182fd5b8235915061289960208401612820565b60008060408385031215612a37578182fd5b50508035926020909101359150565b600060208284031215612a57578081fd5b8135610c658161379a565b600060208284031215612a73578081fd5b8151610c658161379a565b600080600060608486031215612a92578081fd5b833567ffffffffffffffff80821115612aa9578283fd5b612ab587838801612837565b94506020860135915080821115612aca578283fd5b612ad687838801612837565b93506040860135915080821115612aeb578283fd5b50612af886828701612837565b9150509250925092565b60008060008060608587031215612b17578182fd5b8435935060208501359250604085013567ffffffffffffffff80821115612b3c578384fd5b818701915087601f830112612b4f578384fd5b813581811115612b5d578485fd5b886020828501011115612b6e578485fd5b95989497505060200194505050565b60008151808452612b958160208601602086016136ab565b601f01601f19169290920160200192915050565b60008351612bbb8184602088016136ab565b835190830190612bcf8183602088016136ab565b01949350505050565b60007f416363657373436f6e74726f6c3a206163636f756e742000000000000000000082528351612c108160178501602088016136ab565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612c418160288401602088016136ab565b01602801949350505050565b6001600160a01b0391909116815260200190565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090612c9490830184612b7d565b9695505050505050565b901515815260200190565b90815260200190565b600060208252610c656020830184612b7d565b60208082526010908201526f1d1e5c195259081a5cc81b1bd8dad95960821b604082015260600190565b60208082526022908201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e604082015261647360f01b606082015260800190565b6020808252818101527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604082015260600190565b6020808252602b908201527f4552433732315061757361626c653a20746f6b656e207472616e73666572207760408201526a1a1a5b19481c185d5cd95960aa1b606082015260800190565b60208082526014908201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604082015260600190565b6020808252602b908201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560408201526a74206f6620626f756e647360a81b606082015260800190565b60208082526014908201527374797065206973206d617820636170616369747960601b604082015260600190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6020808252601c908201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604082015260600190565b6020808252601590820152743a3cb832903237b2b9903737ba1032bc34b9ba399760591b604082015260600190565b60208082526024908201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646040820152637265737360e01b606082015260800190565b60208082526019908201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604082015260600190565b6020808252602c908201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860408201526b34b9ba32b73a103a37b5b2b760a11b606082015260800190565b60208082526032908201527f53696e676c65546f6b656e57697468547970653a206d7573742068617665206d6040820152711a5b9d195c881c9bdb19481d1bc81b5a5b9d60721b606082015260800190565b60208082526035908201527f53696e676c65546f6b656e57697468547970653a206d75737420686176652070604082015274617573657220726f6c6520746f20756e706175736560581b606082015260800190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b60208082526038908201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760408201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000606082015260800190565b60208082526032908201527f53696e676c65546f6b656e57697468547970653a206d75737420686176652061604082015271191b5a5b881c9bdb19481d1bc819dc985b9d60721b606082015260800190565b6020808252602a908201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604082015269726f206164647265737360b01b606082015260800190565b60208082526029908201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460408201526832b73a103a37b5b2b760b91b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252818101527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604082015260600190565b60208082526031908201527f53696e676c65546f6b656e57697468547970653a2074686973206d616e616765604082015270391030b63932b0b23c9032bc34b9ba399760791b606082015260800190565b60208082526016908201527574797065496420646f6573206e6f742065786973747360501b604082015260600190565b6020808252602c908201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860408201526b34b9ba32b73a103a37b5b2b760a11b606082015260800190565b60208082526030908201527f53696e676c65546f6b656e57697468547970653a20746f6b656e207472616e7360408201526f19995c881dda1a5b19481c185d5cd95960821b606082015260800190565b60208082526029908201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960408201526839903737ba1037bbb760b91b606082015260800190565b6020808252602f908201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60408201526e3732bc34b9ba32b73a103a37b5b2b760891b606082015260800190565b60208082526021908201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656040820152603960f91b606082015260800190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6020808252602c908201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60408201526b7574206f6620626f756e647360a01b606082015260800190565b6020808252600f908201526e3b30b63ab29037bb32b9333637bb9760891b604082015260600190565b60208082526033908201527f53696e676c65546f6b656e57697468547970653a206d75737420686176652070604082015272617573657220726f6c6520746f20706175736560681b606082015260800190565b60208082526030908201527f4552433732314275726e61626c653a2063616c6c6572206973206e6f74206f7760408201526f1b995c881b9bdc88185c1c1c9bdd995960821b606082015260800190565b6020808252602f908201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560408201526e103937b632b9903337b91039b2b63360891b606082015260800190565b6020808252601490820152733a3cb8329030b63932b0b23c9032bc34b9ba399760611b604082015260600190565b6000821982111561365c5761365c613758565b500190565b6000826136705761367061376e565b500490565b600081600019048311821515161561368f5761368f613758565b500290565b6000828210156136a6576136a6613758565b500390565b60005b838110156136c65781810151838201526020016136ae565b83811115610df65750506000910152565b6000816136e6576136e6613758565b506000190190565b60028104600182168061370257607f821691505b6020821081141561372357634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141561373d5761373d613758565b5060010190565b6000826137535761375361376e565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b03198116811461093057600080fdfe65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862aa2646970667358221220d9a940e4224096f1c734765cbba0abe78748fc691f2aac757dac6d4721a121c264736f6c63430008010033";

    public static final String FUNC_DEFAULT_ADMIN_ROLE = "DEFAULT_ADMIN_ROLE";

    public static final String FUNC_MINTER_ROLE = "MINTER_ROLE";

    public static final String FUNC_PAUSER_ROLE = "PAUSER_ROLE";

    public static final String FUNC_APPENDTYPE = "appendType";

    public static final String FUNC_APPROVE = "approve";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_BURN = "burn";

    public static final String FUNC_COUNTOFTYPE = "countOfType";

    public static final String FUNC_GETAPPROVED = "getApproved";

    public static final String FUNC_GETROLEADMIN = "getRoleAdmin";

    public static final String FUNC_GETROLEMEMBER = "getRoleMember";

    public static final String FUNC_GETROLEMEMBERCOUNT = "getRoleMemberCount";

    public static final String FUNC_GRANTROLE = "grantRole";

    public static final String FUNC_HASROLE = "hasRole";

    public static final String FUNC_INCREMENTTYPECAPACITY = "incrementTypeCapacity";

    public static final String FUNC_INDEXSTART = "indexStart";

    public static final String FUNC_INITIALIZE = "initialize";

    public static final String FUNC_ISAPPROVEDFORALL = "isApprovedForAll";

    public static final String FUNC_LOCKTYPE = "lockType";

    public static final String FUNC_MINT = "mint";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_OWNEROF = "ownerOf";

    public static final String FUNC_PAUSE = "pause";

    public static final String FUNC_PAUSED = "paused";

    public static final String FUNC_RENOUNCEROLE = "renounceRole";

    public static final String FUNC_REVOKEROLE = "revokeRole";

    public static final String FUNC_safeTransferFrom = "safeTransferFrom";

    public static final String FUNC_SETAPPROVALFORALL = "setApprovalForAll";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_TOKENBYINDEX = "tokenByIndex";

    public static final String FUNC_TOKENMANAGER = "tokenManager";

    public static final String FUNC_TOKENOFOWNERBYINDEX = "tokenOfOwnerByIndex";

    public static final String FUNC_TOKENURI = "tokenURI";

    public static final String FUNC_TOTALSUPPLY = "totalSupply";

    public static final String FUNC_TRANSFERFROM = "transferFrom";

    public static final String FUNC_TYPEBYINDEX = "typeByIndex";

    public static final String FUNC_TYPEDATASOFTYPE = "typeDatasOfType";

    public static final String FUNC_TYPEISEXISTS = "typeIsExists";

    public static final String FUNC_TYPEISLOCKED = "typeIsLocked";

    public static final String FUNC_TYPEOFTOKEN = "typeOfToken";

    public static final String FUNC_UNLOCKTYPE = "unlockType";

    public static final String FUNC_UNPAUSE = "unpause";

    public static final String FUNC_UPDATETOKENMANAGER = "updateTokenManager";

    public static final Event APPROVAL_EVENT = new Event("Approval", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event APPROVALFORALL_EVENT = new Event("ApprovalForAll", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Bool>() {}));
    ;

    public static final Event PAUSED_EVENT = new Event("Paused", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final Event ROLEADMINCHANGED_EVENT = new Event("RoleAdminChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Bytes32>(true) {}, new TypeReference<Bytes32>(true) {}));
    ;

    public static final Event ROLEGRANTED_EVENT = new Event("RoleGranted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event ROLEREVOKED_EVENT = new Event("RoleRevoked", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event TRANSFER_EVENT = new Event("Transfer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event UNPAUSED_EVENT = new Event("Unpaused", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    @Deprecated
    protected SingleTokenWithType(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected SingleTokenWithType(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected SingleTokenWithType(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected SingleTokenWithType(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<ApprovalEventResponse> getApprovalEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVAL_EVENT, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ApprovalEventResponse>() {
            @Override
            public ApprovalEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVAL_EVENT, log);
                ApprovalEventResponse typedResponse = new ApprovalEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVAL_EVENT));
        return approvalEventFlowable(filter);
    }

    public List<ApprovalForAllEventResponse> getApprovalForAllEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVALFORALL_EVENT, transactionReceipt);
        ArrayList<ApprovalForAllEventResponse> responses = new ArrayList<ApprovalForAllEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ApprovalForAllEventResponse>() {
            @Override
            public ApprovalForAllEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVALFORALL_EVENT, log);
                ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVALFORALL_EVENT));
        return approvalForAllEventFlowable(filter);
    }

    public List<PausedEventResponse> getPausedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(PAUSED_EVENT, transactionReceipt);
        ArrayList<PausedEventResponse> responses = new ArrayList<PausedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            PausedEventResponse typedResponse = new PausedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<PausedEventResponse> pausedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, PausedEventResponse>() {
            @Override
            public PausedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(PAUSED_EVENT, log);
                PausedEventResponse typedResponse = new PausedEventResponse();
                typedResponse.log = log;
                typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<PausedEventResponse> pausedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PAUSED_EVENT));
        return pausedEventFlowable(filter);
    }

    public List<RoleAdminChangedEventResponse> getRoleAdminChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ROLEADMINCHANGED_EVENT, transactionReceipt);
        ArrayList<RoleAdminChangedEventResponse> responses = new ArrayList<RoleAdminChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RoleAdminChangedEventResponse typedResponse = new RoleAdminChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.previousAdminRole = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.newAdminRole = (byte[]) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RoleAdminChangedEventResponse> roleAdminChangedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, RoleAdminChangedEventResponse>() {
            @Override
            public RoleAdminChangedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ROLEADMINCHANGED_EVENT, log);
                RoleAdminChangedEventResponse typedResponse = new RoleAdminChangedEventResponse();
                typedResponse.log = log;
                typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.previousAdminRole = (byte[]) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.newAdminRole = (byte[]) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RoleAdminChangedEventResponse> roleAdminChangedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ROLEADMINCHANGED_EVENT));
        return roleAdminChangedEventFlowable(filter);
    }

    public List<RoleGrantedEventResponse> getRoleGrantedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ROLEGRANTED_EVENT, transactionReceipt);
        ArrayList<RoleGrantedEventResponse> responses = new ArrayList<RoleGrantedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RoleGrantedEventResponse typedResponse = new RoleGrantedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RoleGrantedEventResponse> roleGrantedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, RoleGrantedEventResponse>() {
            @Override
            public RoleGrantedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ROLEGRANTED_EVENT, log);
                RoleGrantedEventResponse typedResponse = new RoleGrantedEventResponse();
                typedResponse.log = log;
                typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.sender = (String) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RoleGrantedEventResponse> roleGrantedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ROLEGRANTED_EVENT));
        return roleGrantedEventFlowable(filter);
    }

    public List<RoleRevokedEventResponse> getRoleRevokedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ROLEREVOKED_EVENT, transactionReceipt);
        ArrayList<RoleRevokedEventResponse> responses = new ArrayList<RoleRevokedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RoleRevokedEventResponse typedResponse = new RoleRevokedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RoleRevokedEventResponse> roleRevokedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, RoleRevokedEventResponse>() {
            @Override
            public RoleRevokedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ROLEREVOKED_EVENT, log);
                RoleRevokedEventResponse typedResponse = new RoleRevokedEventResponse();
                typedResponse.log = log;
                typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.sender = (String) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RoleRevokedEventResponse> roleRevokedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ROLEREVOKED_EVENT));
        return roleRevokedEventFlowable(filter);
    }

    public List<TransferEventResponse> getTransferEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFER_EVENT, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TransferEventResponse> transferEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, TransferEventResponse>() {
            @Override
            public TransferEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFER_EVENT, log);
                TransferEventResponse typedResponse = new TransferEventResponse();
                typedResponse.log = log;
                typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TransferEventResponse> transferEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFER_EVENT));
        return transferEventFlowable(filter);
    }

    public List<UnpausedEventResponse> getUnpausedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(UNPAUSED_EVENT, transactionReceipt);
        ArrayList<UnpausedEventResponse> responses = new ArrayList<UnpausedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UnpausedEventResponse typedResponse = new UnpausedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<UnpausedEventResponse> unpausedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, UnpausedEventResponse>() {
            @Override
            public UnpausedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(UNPAUSED_EVENT, log);
                UnpausedEventResponse typedResponse = new UnpausedEventResponse();
                typedResponse.log = log;
                typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<UnpausedEventResponse> unpausedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UNPAUSED_EVENT));
        return unpausedEventFlowable(filter);
    }

    public RemoteFunctionCall<byte[]> DEFAULT_ADMIN_ROLE() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_DEFAULT_ADMIN_ROLE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<byte[]> MINTER_ROLE() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_MINTER_ROLE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<byte[]> PAUSER_ROLE() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PAUSER_ROLE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<TransactionReceipt> appendType(BigInteger typeId, BigInteger capacity, String datas) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_APPENDTYPE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(typeId), 
                new org.web3j.abi.datatypes.generated.Uint256(capacity), 
                new org.web3j.abi.datatypes.Utf8String(datas)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> approve(String to, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_APPROVE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> balanceOf(String owner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BALANCEOF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> burn(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_BURN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> countOfType() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_COUNTOFTYPE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> getApproved(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETAPPROVED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<byte[]> getRoleAdmin(byte[] role) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETROLEADMIN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(role)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<String> getRoleMember(byte[] role, BigInteger index) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETROLEMEMBER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(role), 
                new org.web3j.abi.datatypes.generated.Uint256(index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> getRoleMemberCount(byte[] role) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETROLEMEMBERCOUNT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(role)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> grantRole(byte[] role, String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_GRANTROLE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(role), 
                new org.web3j.abi.datatypes.Address(160, account)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> hasRole(byte[] role, String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_HASROLE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(role), 
                new org.web3j.abi.datatypes.Address(160, account)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> incrementTypeCapacity(BigInteger typeId, BigInteger count) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_INCREMENTTYPECAPACITY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(typeId), 
                new org.web3j.abi.datatypes.generated.Uint256(count)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> indexStart() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_INDEXSTART, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> initialize(String name, String symbol, String baseTokenURI) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_INITIALIZE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(name), 
                new org.web3j.abi.datatypes.Utf8String(symbol), 
                new org.web3j.abi.datatypes.Utf8String(baseTokenURI)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> isApprovedForAll(String owner, String operator) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISAPPROVEDFORALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner), 
                new org.web3j.abi.datatypes.Address(160, operator)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> lockType(BigInteger typeId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_LOCKTYPE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(typeId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> mint(String to, BigInteger tokenId, BigInteger typeId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_MINT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId), 
                new org.web3j.abi.datatypes.generated.Uint256(typeId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> name() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> ownerOf(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNEROF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> pause() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_PAUSE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> paused() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PAUSED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceRole(byte[] role, String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RENOUNCEROLE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(role), 
                new org.web3j.abi.datatypes.Address(160, account)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> revokeRole(byte[] role, String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_REVOKEROLE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(role), 
                new org.web3j.abi.datatypes.Address(160, account)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_safeTransferFrom, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to, BigInteger tokenId, byte[] _data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_safeTransferFrom, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId), 
                new org.web3j.abi.datatypes.DynamicBytes(_data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setApprovalForAll(String operator, Boolean approved) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETAPPROVALFORALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, operator), 
                new org.web3j.abi.datatypes.Bool(approved)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> supportsInterface(byte[] interfaceId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SUPPORTSINTERFACE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes4(interfaceId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> symbol() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SYMBOL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> tokenByIndex(BigInteger index) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOKENBYINDEX, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> tokenManager() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOKENMANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> tokenOfOwnerByIndex(String owner, BigInteger index) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOKENOFOWNERBYINDEX, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner), 
                new org.web3j.abi.datatypes.generated.Uint256(index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> tokenURI(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOKENURI, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> totalSupply() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOTALSUPPLY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transferFrom(String from, String to, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFERFROM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> typeByIndex(BigInteger index) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TYPEBYINDEX, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> typeDatasOfType(BigInteger typeId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TYPEDATASOFTYPE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(typeId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Boolean> typeIsExists(BigInteger typeId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TYPEISEXISTS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(typeId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> typeIsLocked(BigInteger typeId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TYPEISLOCKED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(typeId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<BigInteger> typeOfToken(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TYPEOFTOKEN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> unlockType(BigInteger typeId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UNLOCKTYPE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(typeId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> unpause() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UNPAUSE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateTokenManager(String manager) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UPDATETOKENMANAGER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, manager)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static SingleTokenWithType load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new SingleTokenWithType(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static SingleTokenWithType load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new SingleTokenWithType(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static SingleTokenWithType load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new SingleTokenWithType(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static SingleTokenWithType load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new SingleTokenWithType(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<SingleTokenWithType> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(SingleTokenWithType.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<SingleTokenWithType> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(SingleTokenWithType.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<SingleTokenWithType> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(SingleTokenWithType.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<SingleTokenWithType> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(SingleTokenWithType.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class ApprovalEventResponse extends BaseEventResponse {
        public String owner;

        public String approved;

        public BigInteger tokenId;
    }

    public static class ApprovalForAllEventResponse extends BaseEventResponse {
        public String owner;

        public String operator;

        public Boolean approved;
    }

    public static class PausedEventResponse extends BaseEventResponse {
        public String account;
    }

    public static class RoleAdminChangedEventResponse extends BaseEventResponse {
        public byte[] role;

        public byte[] previousAdminRole;

        public byte[] newAdminRole;
    }

    public static class RoleGrantedEventResponse extends BaseEventResponse {
        public byte[] role;

        public String account;

        public String sender;
    }

    public static class RoleRevokedEventResponse extends BaseEventResponse {
        public byte[] role;

        public String account;

        public String sender;
    }

    public static class TransferEventResponse extends BaseEventResponse {
        public String from;

        public String to;

        public BigInteger tokenId;
    }

    public static class UnpausedEventResponse extends BaseEventResponse {
        public String account;
    }
}
